import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Load the Excel file
df = pd.read_excel("Calibration.xlsx")

# Data (example values)
iron_content_R= df[df["ref"] == "R"]["Total"]
heat_capacity_R =np.full(np.shape(iron_content_R), (199.7/2 - 78.94))
iron_content_S= df[df["ref"] == "S"]["Total"]
heat_capacity_S = np.full(np.shape(iron_content_S), (229/2 - 78.9))
iron_content_L = df[df["ref"] == "L"]["Total"]
heat_capacity_L = np.full(np.shape(iron_content_L), (240.9/2-78.8))

# Set the temperature range as the color bar
temperature_range_R = np.linspace(1452, 1854, len(iron_content_R))
temperature_range_S = np.linspace(1200, 1850, len(iron_content_S))
temperature_range_L = np.linspace(1140, 1674, len(iron_content_L))

# Set up the colormap and normalization
cmap = plt.cm.get_cmap('rainbow')
norm = plt.Normalize(min(temperature_range_R[0], temperature_range_S[0], temperature_range_L[0]), 
                     max(temperature_range_R[-1], temperature_range_S[-1], temperature_range_L[-1]))



# Plot the data with color mapping
fig, ax = plt.subplots()
# Calculate the width of each bar as the range of iron content
width_R = max(iron_content_R) - min(iron_content_R)
width_S = max(iron_content_S) - min(iron_content_S)
width_L = max(iron_content_L) - min(iron_content_L)

print("Width R:", width_R)
print("Width S:", width_S)
print("Width L:", width_L)

# Calculate the y positions for each bar
y_R = np.mean(heat_capacity_R)
y_S = np.mean(heat_capacity_S)
y_L = np.mean(heat_capacity_L)

print("Y Positions - R:", y_R, "S:", y_S, "L:", y_L)

# Plot horizontal bars
bar1 = ax.barh(y_R, width_R, left=min(iron_content_R), color=cmap(norm(temperature_range_R.mean())), edgecolor='black', alpha = 0.6, label='Richet and Bottinga, 1985')
bar2 = ax.barh(y_S, width_S, left=min(iron_content_S), color=cmap(norm(temperature_range_S.mean())), edgecolor='black',alpha = 0.6, label='Stebbins et. al., 1984')
bar3 = ax.barh(y_L, width_L, left=min(iron_content_L), color=cmap(norm(temperature_range_L.mean())), edgecolor='black', alpha = 0.6,label='Lange and Navrotsky, 1992')

# Add color bar to the plot
sm2 = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm2.set_array([])
cbar2 = plt.colorbar(sm2, ax=ax)
cbar2.set_label('Experimental Temperature (K)')

my_dataset = pd.read_excel('cv_cal.xlsx',#previous file is ''eos.xlsx, and after that is 'cv_cal.xlsx'
                           sheet_name='de_cp_with_5000K_new_data')#'cv_cal.xlsx',sheet_name='finalized_data')##'Data generated by Donghao')


for (name, mole, lab, mark, temp_range) in [('Fe_12p5', 8, r'$X_{\mathrm{FeO^T}}$ = 12.5 mol.$\%$', 's', my_dataset.Temperature),
                                                ('Fe_25', 4, r'$X_{\mathrm{FeO^T}}$ = 25.0 mol.$\%$', 'D', my_dataset.Temperature)]:
    my_data = my_dataset[my_dataset.Fe == name]
    cmap = plt.cm.get_cmap('seismic')
    norm = plt.Normalize(min(my_data.Temperature), max(my_data.Temperature))
    ax.scatter(np.full(np.shape(my_data.delta_Cp), 1/mole), my_data.delta_Cp*mole,
               c=my_data.Temperature, cmap=cmap, label='This study ' + lab, marker=mark, s=30, edgecolor='black', linewidth = 0.25,vmin=min(temp_range), vmax=max(temp_range))
    print(my_data.Temperature)
# Set minor ticks without grid lines
ax.minorticks_on()
ax.grid(False, which='both', axis='both')



# Add color bar to the plot
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm.set_array([])
cbar = plt.colorbar(sm, ax=ax)
cbar.set_label('Simulation Temperature (K)')



# Set the x and y axis labels
ax.set_xlabel('$X_{\mathrm{FeO^T}}$')
ax.set_ylabel(r'$\Delta C_P\mathrm{\; (J/mol/K)}$')
ax.set_xlim(0, 0.5)
ax.set_ylim(0, 50)

ax.legend(loc='upper right', fontsize=8)
plt.tight_layout()
plt.legend(loc='upper right', fontsize=8,fancybox=False, framealpha=0.5)
plt.savefig('./cp_iron_content.png', dpi=300)
plt.savefig('./cp_iron_content.pdf')

